メモ
・編集するファイル→index2.ts
・実行 →　npm run server
・iPhone8の画面サイズ　750x1334 ピクセル

やること

画面のエリアを決めよう。
・全体(aBase)
・スコア(aScore)
・会話(aMessage)
・キャラクタ(aCharacter)
・回答欄(aAnswer)

画面の色を決めよう
画面に画像を貼ろう
シナリオを読み込もう
シナリオを処理しよう



Tips

■色の定義■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
定数	
値
色
 
vbBlack	
0x000000
黒
 
vbRed	
0x0000FF
赤
 
vbGreen	
0x00FF00
緑
 
vbYellow	
0x00FFFF
黄
 
vbBlue	
0xFF0000
青
 
vbMagenta	
0xFF00FF
マゼンタ
 
vbCyan	
0xFFFF00
シアン
 
vbWhite	
0xFFFFFF
白
 

■サーバサイドからJSONの読み込み(動作しない)■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
let rsGetJSON = '';
function getJSON(url:string){
    fetch(url) //非同期処理に注意。チェーンメソッドを利用。
        .then(function(response) {
            return response.json();
        })
        .then(function(json) {
            //var json = JSON.parse(JSON.stringify( data ));
            //alert(json);
            alert(json);
            rsGetJSON = json;
        })
        .catch((error) => {
            alert('Error:'+ error);
        }); 
}

■アニメーション処理■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
//app.ticker.add(animate);
        let amountTime = 0;

        // 処理の定義
        function animate(delta) {
            // ぶたがはまってる円を左右に動かす(適当なのでほっとくとどんどんずれていきます)
            //amountTime += delta;                    // delta(app.ticker.deltaTime) : 前のフレームから今のフレームまでの経過時間を正規化した値？
            amountTime += app.ticker.deltaMS;    // app.ticker.deltaMS  : 前のフレームから今のフレームまでの経過時間(ms)

            if (amountTime >= 1000) {
                // 右に動かす
                alert("1秒たったぜ！" +amountTime);
                amountTime = 0
                //スプライトに対して処理も可能
                //aAnswerSprite.x = 100;       
            }
            else {
                // 左に動かす
                //circle.x -= 2;
            }
        }
■■■■ボタンのz値を変化させる■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

            let sampleContainer = new PIXI.Container();
            let a1 = new PIXI.Sprite(PIXI.Texture.from('/assets/次へボタン.png'));  
            let a2 = new PIXI.Sprite(PIXI.Texture.from('/assets/次へボタン2.png'));    
            sampleContainer.addChild(a1);
            sampleContainer.addChild(a2);
            app.stage.addChild(sampleContainer);
            sampleContainer.x = 600
            sampleContainer.y = 400

            sampleContainer.sortableChildren = true;
            // (どのオブジェクトもzIndexの初期値は0)
            //a1.zIndex = 10;
            sampleContainer.removeChildAt(sampleContainer.children.length-1);

            app.stage.sortableChildren = true;
            sampleContainer.zIndex = -1;